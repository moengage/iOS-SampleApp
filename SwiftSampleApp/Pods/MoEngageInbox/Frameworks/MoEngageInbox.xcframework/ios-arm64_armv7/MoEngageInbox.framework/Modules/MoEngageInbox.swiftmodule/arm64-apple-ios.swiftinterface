// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.6.1 (swiftlang-5.6.0.323.66 clang-1316.0.20.12)
// swift-module-flags: -target arm64-apple-ios10.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name MoEngageInbox
import Foundation
import MoEngageAnalytics
import MoEngageCore
@_exported import MoEngageInbox
import MoEngageMessaging
import Swift
import UIKit
import _Concurrency
@_inheritsConvenienceInitializers @objc public class MoEngageInboxNavigationBarStyle : ObjectiveC.NSObject {
  @objc public var navigationBarColor: UIKit.UIColor?
  @objc public var navigationBarTintColor: UIKit.UIColor?
  @objc public var navigationBarTitleColor: UIKit.UIColor?
  @objc public var navigationBarTitleFont: UIKit.UIFont?
  @objc public var navigationBarTransluscent: Swift.Bool
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class MoEngageInboxUIConfiguration : ObjectiveC.NSObject {
  @objc public var navigationBarTitle: Swift.String
  @objc public var navigationBarStyle: MoEngageInbox.MoEngageInboxNavigationBarStyle?
  @objc public var enablePullToRefresh: Swift.Bool
  @objc public var pullToRefreshTintColor: UIKit.UIColor
  @objc public var inboxViewControllerBGColor: UIKit.UIColor
  @objc public var inboxTableViewBGColor: UIKit.UIColor
  @objc public var cellDefaultBackgroundColor: UIKit.UIColor
  @objc public var cellUnreadBackgroundColor: UIKit.UIColor
  @objc public var cellSelectionTintColor: UIKit.UIColor
  @objc public var cellHeaderLabelTextColor: UIKit.UIColor
  @objc public var cellMessageLabelTextColor: UIKit.UIColor
  @objc public var cellTimestampLabelTextColor: UIKit.UIColor
  @objc public var cellHeaderLabelFont: UIKit.UIFont
  @objc public var cellMessageLabelFont: UIKit.UIFont
  @objc public var cellTimestampLabelFont: UIKit.UIFont
  @objc public var timestampDateFormat: Swift.String
  @objc public var emptyInboxText: Swift.String
  @objc public var emptyInboxTextColor: UIKit.UIColor
  @objc public var emptyInboxTextFont: UIKit.UIFont
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class MoEngageInboxDelegateHandler : MoEngageCore.MoEngageInboxDelegate {
  override public func logout(sdkInstance: MoEngageCore.MoEngageSDKInstance, onCompleted: @escaping () -> ())
  override public func updateModule(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  override public func initializeInbox(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  override public func applicationDidEnterForeground(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class MoEngageInboxEntry : ObjectiveC.NSObject, Foundation.NSCoding {
  @objc public var appID: Swift.String
  @objc public var campaignID: Swift.String?
  @objc public var notificationPayloadDict: [Swift.String : Any]
  @objc public var screenDataDict: [Swift.String : Any]
  @objc public var moengageDict: [Swift.String : Any]
  @objc final public let notificationTitle: Swift.String
  @objc final public let notificationSubTitle: Swift.String
  @objc public var notificationBody: Swift.String
  @objc final public let notificationSound: Swift.String?
  @objc final public let notificationMediaURL: Swift.String?
  @objc public var receivedDate: Foundation.Date? {
    get
  }
  @objc public var clickedDate: Foundation.Date? {
    get
  }
  @objc public var inboxExpiryDate: Foundation.Date?
  @objc final public let screenName: Swift.String?
  @objc final public let deepLinkURL: Swift.String?
  @objc final public let richLandingURL: Swift.String?
  @objc final public let couponCode: Swift.String?
  @objc public var isRead: Swift.Bool {
    get
  }
  @objc public func encode(with aCoder: Foundation.NSCoder)
  @objc required public init(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
@objc public protocol MoEngageInboxViewControllerDelegate {
  @objc optional func inboxViewControllerDismissed()
  @objc optional func inboxEntryDeleted(_ inboxItem: MoEngageInbox.MoEngageInboxEntry)
  @objc optional func inboxEntryClicked(_ inboxItem: MoEngageInbox.MoEngageInboxEntry)
}
@_inheritsConvenienceInitializers @objc @_Concurrency.MainActor(unsafe) public class MoEngageInboxViewController : UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension MoEngageInbox.MoEngageInboxViewController : UIKit.UITableViewDataSource, UIKit.UITableViewDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func numberOfSections(in tableView: UIKit.UITableView) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, didHighlightRowAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, didUnhighlightRowAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, didSelectRowAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, canEditRowAt indexPath: Foundation.IndexPath) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, commit editingStyle: UIKit.UITableViewCell.EditingStyle, forRowAt indexPath: Foundation.IndexPath)
}
@objc public protocol MoEngageInboxStatusDelegate {
  @objc optional func inboxSyncedSuccessfully(withAccountMeta accountMeta: MoEngageCore.MoEngageAccountMeta)
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class MoEngageSDKInbox : ObjectiveC.NSObject {
  @objc public static let sharedInstance: MoEngageInbox.MoEngageSDKInbox
  @objc public func setInboxDelegate(delegate: MoEngageInbox.MoEngageInboxStatusDelegate, forAppID appID: Swift.String? = nil)
  @objc public func getInboxMessages(forAppID appID: Swift.String? = nil, withCompletionBlock completionBlock: @escaping ((Swift.Array<MoEngageInbox.MoEngageInboxEntry>, MoEngageCore.MoEngageAccountMeta?) -> Swift.Void))
  @objc public func getAllNotificationCount(forAppID appID: Swift.String? = nil, withCompletionBlock completionBlock: @escaping ((Swift.Int, MoEngageCore.MoEngageAccountMeta?) -> Swift.Void))
  @objc public func getUnreadNotificationCount(forAppID appID: Swift.String? = nil, withCompletionBlock completionBlock: @escaping ((Swift.Int, MoEngageCore.MoEngageAccountMeta?) -> Swift.Void))
  @objc public func processInboxNotification(withCampaignID cid: Swift.String, forAppID appID: Swift.String? = nil)
  @objc public func markInboxNotificationClicked(withCampaignID cid: Swift.String, forAppID appID: Swift.String? = nil, completionHandler: ((Swift.Bool) -> Swift.Void)? = nil)
  @objc public func trackInboxClick(withCampaignID cid: Swift.String, forAppID appID: Swift.String? = nil)
  @objc public func removeInboxMessage(withCampaignID cid: Swift.String, forAppID appID: Swift.String? = nil, completionHandler: ((Swift.Bool) -> Swift.Void)? = nil)
  @objc public func removeInboxMessages(forAppID appID: Swift.String? = nil, completionHandler: ((Swift.Bool) -> Swift.Void)? = nil)
  @objc public func presentInboxViewController(withUIConfiguration uiConfig: MoEngageInbox.MoEngageInboxUIConfiguration? = nil, withInboxWithControllerDelegate delegate: MoEngageInbox.MoEngageInboxViewControllerDelegate? = nil, forAppID appID: Swift.String? = nil)
  @objc public func pushInboxViewController(toNavigationController navController: UIKit.UINavigationController, withUIConfiguration uiConfig: MoEngageInbox.MoEngageInboxUIConfiguration? = nil, withInboxWithControllerDelegate delegate: MoEngageInbox.MoEngageInboxViewControllerDelegate? = nil, forAppID appID: Swift.String? = nil)
  @objc public func getInboxViewController(withUIConfiguration uiConfig: MoEngageInbox.MoEngageInboxUIConfiguration? = nil, withInboxWithControllerDelegate delegate: MoEngageInbox.MoEngageInboxViewControllerDelegate? = nil, forAppID appID: Swift.String? = nil, withCompletionBlock completionBlock: @escaping (MoEngageInbox.MoEngageInboxViewController?) -> ())
  @objc deinit
}
